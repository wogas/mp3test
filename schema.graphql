# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Artist {
  id: ID!
  name: String
  about: Artist_about_Document
  birthname: String
  genre: String
  dob: String
  recordLabel: String
  avater: ImageFieldOutput
  songs(
    where: SongWhereInput! = {}
    orderBy: [SongOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Song!]
  songsCount(where: SongWhereInput! = {}): Int
  album(
    where: AlbumWhereInput! = {}
    orderBy: [AlbumOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Album!]
  albumCount(where: AlbumWhereInput! = {}): Int
}

type Artist_about_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ArtistWhereUniqueInput {
  id: ID
  name: String
}

input ArtistWhereInput {
  AND: [ArtistWhereInput!]
  OR: [ArtistWhereInput!]
  NOT: [ArtistWhereInput!]
  id: IDFilter
  name: StringFilter
  birthname: StringFilter
  genre: StringFilter
  dob: StringFilter
  recordLabel: StringFilter
  songs: SongManyRelationFilter
  album: AlbumManyRelationFilter
}

input SongManyRelationFilter {
  every: SongWhereInput
  some: SongWhereInput
  none: SongWhereInput
}

input AlbumManyRelationFilter {
  every: AlbumWhereInput
  some: AlbumWhereInput
  none: AlbumWhereInput
}

input ArtistOrderByInput {
  id: OrderDirection
  name: OrderDirection
  birthname: OrderDirection
  genre: OrderDirection
  dob: OrderDirection
  recordLabel: OrderDirection
}

input ArtistUpdateInput {
  name: String
  about: JSON
  birthname: String
  genre: String
  dob: String
  recordLabel: String
  avater: ImageFieldInput
  songs: SongRelateToManyForUpdateInput
  album: AlbumRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input SongRelateToManyForUpdateInput {
  disconnect: [SongWhereUniqueInput!]
  set: [SongWhereUniqueInput!]
  create: [SongCreateInput!]
  connect: [SongWhereUniqueInput!]
}

input AlbumRelateToManyForUpdateInput {
  disconnect: [AlbumWhereUniqueInput!]
  set: [AlbumWhereUniqueInput!]
  create: [AlbumCreateInput!]
  connect: [AlbumWhereUniqueInput!]
}

input ArtistUpdateArgs {
  where: ArtistWhereUniqueInput!
  data: ArtistUpdateInput!
}

input ArtistCreateInput {
  name: String
  about: JSON
  birthname: String
  genre: String
  dob: String
  recordLabel: String
  avater: ImageFieldInput
  songs: SongRelateToManyForCreateInput
  album: AlbumRelateToManyForCreateInput
}

input SongRelateToManyForCreateInput {
  create: [SongCreateInput!]
  connect: [SongWhereUniqueInput!]
}

input AlbumRelateToManyForCreateInput {
  create: [AlbumCreateInput!]
  connect: [AlbumWhereUniqueInput!]
}

type Song {
  id: ID!
  title: String
  description: String
  genre: String
  listenedCount: Int
  downloads: Int
  tags: String
  songUrl: FileFieldOutput
  songAvater: ImageFieldOutput
  featuring: JSON
  album(
    where: AlbumWhereInput! = {}
    orderBy: [AlbumOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Album!]
  albumCount(where: AlbumWhereInput! = {}): Int
  artist(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artistCount(where: ArtistWhereInput! = {}): Int
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
  lyrics: Song_lyrics_Document
  createdAt: DateTime
}

type FileFieldOutput {
  filename: String!
  filesize: Int!
  url: String!
}

type Song_lyrics_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input SongWhereUniqueInput {
  id: ID
  title: String
}

input SongWhereInput {
  AND: [SongWhereInput!]
  OR: [SongWhereInput!]
  NOT: [SongWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  genre: StringFilter
  listenedCount: IntNullableFilter
  downloads: IntNullableFilter
  tags: StringFilter
  album: AlbumManyRelationFilter
  artist: ArtistManyRelationFilter
  comment: CommentManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ArtistManyRelationFilter {
  every: ArtistWhereInput
  some: ArtistWhereInput
  none: ArtistWhereInput
}

input CommentManyRelationFilter {
  every: CommentWhereInput
  some: CommentWhereInput
  none: CommentWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input SongOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  genre: OrderDirection
  listenedCount: OrderDirection
  downloads: OrderDirection
  tags: OrderDirection
  createdAt: OrderDirection
}

input SongUpdateInput {
  title: String
  description: String
  genre: String
  listenedCount: Int
  downloads: Int
  tags: String
  songUrl: FileFieldInput
  songAvater: ImageFieldInput
  featuring: JSON
  album: AlbumRelateToManyForUpdateInput
  artist: ArtistRelateToManyForUpdateInput
  comment: CommentRelateToManyForUpdateInput
  lyrics: JSON
  createdAt: DateTime
}

input FileFieldInput {
  upload: Upload!
}

input ArtistRelateToManyForUpdateInput {
  disconnect: [ArtistWhereUniqueInput!]
  set: [ArtistWhereUniqueInput!]
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

input CommentRelateToManyForUpdateInput {
  disconnect: [CommentWhereUniqueInput!]
  set: [CommentWhereUniqueInput!]
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

input SongUpdateArgs {
  where: SongWhereUniqueInput!
  data: SongUpdateInput!
}

input SongCreateInput {
  title: String
  description: String
  genre: String
  listenedCount: Int
  downloads: Int
  tags: String
  songUrl: FileFieldInput
  songAvater: ImageFieldInput
  featuring: JSON
  album: AlbumRelateToManyForCreateInput
  artist: ArtistRelateToManyForCreateInput
  comment: CommentRelateToManyForCreateInput
  lyrics: JSON
  createdAt: DateTime
}

input ArtistRelateToManyForCreateInput {
  create: [ArtistCreateInput!]
  connect: [ArtistWhereUniqueInput!]
}

input CommentRelateToManyForCreateInput {
  create: [CommentCreateInput!]
  connect: [CommentWhereUniqueInput!]
}

type Album {
  id: ID!
  title: String
  about: String
  featuring: JSON
  artist(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artistCount(where: ArtistWhereInput! = {}): Int
  song(
    where: SongWhereInput! = {}
    orderBy: [SongOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Song!]
  songCount(where: SongWhereInput! = {}): Int
}

input AlbumWhereUniqueInput {
  id: ID
  title: String
}

input AlbumWhereInput {
  AND: [AlbumWhereInput!]
  OR: [AlbumWhereInput!]
  NOT: [AlbumWhereInput!]
  id: IDFilter
  title: StringFilter
  about: StringFilter
  artist: ArtistManyRelationFilter
  song: SongManyRelationFilter
}

input AlbumOrderByInput {
  id: OrderDirection
  title: OrderDirection
  about: OrderDirection
}

input AlbumUpdateInput {
  title: String
  about: String
  featuring: JSON
  artist: ArtistRelateToManyForUpdateInput
  song: SongRelateToManyForUpdateInput
}

input AlbumUpdateArgs {
  where: AlbumWhereUniqueInput!
  data: AlbumUpdateInput!
}

input AlbumCreateInput {
  title: String
  about: String
  featuring: JSON
  artist: ArtistRelateToManyForCreateInput
  song: SongRelateToManyForCreateInput
}

type Comment {
  id: ID!
  name: String
  email: String
  content: String
  reply(
    where: ReplyWhereInput! = {}
    orderBy: [ReplyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reply!]
  replyCount(where: ReplyWhereInput! = {}): Int
  song(
    where: SongWhereInput! = {}
    orderBy: [SongOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Song!]
  songCount(where: SongWhereInput! = {}): Int
}

input CommentWhereUniqueInput {
  id: ID
  email: String
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  content: StringFilter
  reply: ReplyManyRelationFilter
  song: SongManyRelationFilter
}

input ReplyManyRelationFilter {
  every: ReplyWhereInput
  some: ReplyWhereInput
  none: ReplyWhereInput
}

input CommentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  content: OrderDirection
}

input CommentUpdateInput {
  name: String
  email: String
  content: String
  reply: ReplyRelateToManyForUpdateInput
  song: SongRelateToManyForUpdateInput
}

input ReplyRelateToManyForUpdateInput {
  disconnect: [ReplyWhereUniqueInput!]
  set: [ReplyWhereUniqueInput!]
  create: [ReplyCreateInput!]
  connect: [ReplyWhereUniqueInput!]
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  name: String
  email: String
  content: String
  reply: ReplyRelateToManyForCreateInput
  song: SongRelateToManyForCreateInput
}

input ReplyRelateToManyForCreateInput {
  create: [ReplyCreateInput!]
  connect: [ReplyWhereUniqueInput!]
}

type Reply {
  id: ID!
  name: String
  content: String
  comment(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  commentCount(where: CommentWhereInput! = {}): Int
}

input ReplyWhereUniqueInput {
  id: ID
}

input ReplyWhereInput {
  AND: [ReplyWhereInput!]
  OR: [ReplyWhereInput!]
  NOT: [ReplyWhereInput!]
  id: IDFilter
  name: StringFilter
  content: StringFilter
  comment: CommentManyRelationFilter
}

input ReplyOrderByInput {
  id: OrderDirection
  name: OrderDirection
  content: OrderDirection
}

input ReplyUpdateInput {
  name: String
  content: String
  comment: CommentRelateToManyForUpdateInput
}

input ReplyUpdateArgs {
  where: ReplyWhereUniqueInput!
  data: ReplyUpdateInput!
}

input ReplyCreateInput {
  name: String
  content: String
  comment: CommentRelateToManyForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createArtist(data: ArtistCreateInput!): Artist
  createArtists(data: [ArtistCreateInput!]!): [Artist]
  updateArtist(where: ArtistWhereUniqueInput!, data: ArtistUpdateInput!): Artist
  updateArtists(data: [ArtistUpdateArgs!]!): [Artist]
  deleteArtist(where: ArtistWhereUniqueInput!): Artist
  deleteArtists(where: [ArtistWhereUniqueInput!]!): [Artist]
  createSong(data: SongCreateInput!): Song
  createSongs(data: [SongCreateInput!]!): [Song]
  updateSong(where: SongWhereUniqueInput!, data: SongUpdateInput!): Song
  updateSongs(data: [SongUpdateArgs!]!): [Song]
  deleteSong(where: SongWhereUniqueInput!): Song
  deleteSongs(where: [SongWhereUniqueInput!]!): [Song]
  createAlbum(data: AlbumCreateInput!): Album
  createAlbums(data: [AlbumCreateInput!]!): [Album]
  updateAlbum(where: AlbumWhereUniqueInput!, data: AlbumUpdateInput!): Album
  updateAlbums(data: [AlbumUpdateArgs!]!): [Album]
  deleteAlbum(where: AlbumWhereUniqueInput!): Album
  deleteAlbums(where: [AlbumWhereUniqueInput!]!): [Album]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  createReply(data: ReplyCreateInput!): Reply
  createReplies(data: [ReplyCreateInput!]!): [Reply]
  updateReply(where: ReplyWhereUniqueInput!, data: ReplyUpdateInput!): Reply
  updateReplies(data: [ReplyUpdateArgs!]!): [Reply]
  deleteReply(where: ReplyWhereUniqueInput!): Reply
  deleteReplies(where: [ReplyWhereUniqueInput!]!): [Reply]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  artists(
    where: ArtistWhereInput! = {}
    orderBy: [ArtistOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artist!]
  artist(where: ArtistWhereUniqueInput!): Artist
  artistsCount(where: ArtistWhereInput! = {}): Int
  songs(
    where: SongWhereInput! = {}
    orderBy: [SongOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Song!]
  song(where: SongWhereUniqueInput!): Song
  songsCount(where: SongWhereInput! = {}): Int
  albums(
    where: AlbumWhereInput! = {}
    orderBy: [AlbumOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Album!]
  album(where: AlbumWhereUniqueInput!): Album
  albumsCount(where: AlbumWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  replies(
    where: ReplyWhereInput! = {}
    orderBy: [ReplyOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reply!]
  reply(where: ReplyWhereUniqueInput!): Reply
  repliesCount(where: ReplyWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
